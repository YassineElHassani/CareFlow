version: "3.8"

services:
  # Main API Application
  app:
    build:
      context: .
      target: development
    container_name: careflow_app
    env_file: .env.docker
    ports:
      - "3000:3000"
    depends_on:
      - mongo
      - redis
      - maildev
      - minio
    volumes:
      - ./src:/usr/src/app/src
      - ./package.json:/usr/src/app/package.json
      - ./package-lock.json:/usr/src/app/package-lock.json
    command: npm run dev
    networks:
      - careflow_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/v1/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Email Worker (Background Jobs)
  worker:
    build:
      context: .
      target: development
    container_name: careflow_worker
    env_file: .env.docker
    depends_on:
      - redis
      - maildev
    volumes:
      - ./src:/usr/src/app/src
      - ./package.json:/usr/src/app/package.json
      - ./package-lock.json:/usr/src/app/package-lock.json
    command: npm run worker
    networks:
      - careflow_network
    restart: unless-stopped

  # MongoDB Database
  mongo:
    image: mongo:6.0
    container_name: careflow_mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - careflow_network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Redis (Queue & Cache)
  redis:
    image: redis:7-alpine
    container_name: careflow_redis
    ports:
      - "6379:6379"
    command: [ "redis-server", "--appendonly", "yes" ]
    volumes:
      - redis-data:/data
    networks:
      - careflow_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # MailDev (Email Testing)
  maildev:
    image: maildev/maildev
    container_name: careflow_maildev
    ports:
      - "1080:1080" # Web UI
      - "1025:1025" # SMTP
    networks:
      - careflow_network
    restart: unless-stopped

  # MinIO - S3-compatible Object Storage
  minio:
    image: minio/minio:latest
    container_name: careflow_minio
    ports:
      - "9000:9000" # API port
      - "9001:9001" # Console UI port
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_DOMAIN: minio
      MINIO_REGION_NAME: ${MINIO_REGION:-us-east-1}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - careflow_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # MinIO Client - Auto-create buckets
  minio-mc:
    image: minio/mc:latest
    container_name: careflow_minio_mc
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - careflow_network
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin123};
      /usr/bin/mc mb minio/careflow-documents --ignore-existing;
      /usr/bin/mc mb minio/careflow-lab-reports --ignore-existing;
      /usr/bin/mc mb minio/careflow-prescriptions --ignore-existing;
      /usr/bin/mc anonymous set download minio/careflow-documents;
      /usr/bin/mc anonymous set download minio/careflow-lab-reports;
      exit 0;
      "
    restart: "no"

volumes:
  mongo-data:
  redis-data:
  minio-data:    # âœ… Added MinIO volume here

networks:
  careflow_network:
    driver: bridge